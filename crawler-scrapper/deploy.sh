#!/bin/bash

# Script de d√©ploiement pour DigitalOcean Droplet
# Usage: ./deploy.sh [production|development]

set -e  # Arr√™ter en cas d'erreur

# Configuration
PROJECT_NAME="manga-scraper"
DOCKER_COMPOSE_FILE="docker-compose.yml"
ENV_FILE=".env"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions d'affichage
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fonction de nettoyage en cas d'erreur
cleanup() {
    log_error "D√©ploiement interrompu"
    exit 1
}

trap cleanup ERR

# V√©rifier l'environnement
ENVIRONMENT=${1:-production}
log_info "D√©ploiement en mode: $ENVIRONMENT"

# V√©rifier que Docker et Docker Compose sont install√©s
if ! command -v docker &> /dev/null; then
    log_error "Docker n'est pas install√©"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose n'est pas install√©"
    exit 1
fi

# Cr√©er les dossiers n√©cessaires
log_info "Cr√©ation des dossiers n√©cessaires..."
mkdir -p docker/nginx
mkdir -p docker/init-db
mkdir -p logs

# V√©rifier le fichier .env
if [ ! -f "$ENV_FILE" ]; then
    log_warning "Fichier .env non trouv√©, cr√©ation depuis .env.example"
    if [ -f ".env.example" ]; then
        cp .env.example .env
        log_warning "‚ö†Ô∏è  N'oubliez pas de configurer votre fichier .env avec vos vraies valeurs!"
    else
        log_error "Aucun fichier .env ou .env.example trouv√©"
        exit 1
    fi
fi

# V√©rification des variables critiques
log_info "V√©rification de la configuration..."
source $ENV_FILE

if [ -z "$DB_PASSWORD" ] || [ "$DB_PASSWORD" = "your_password" ]; then
    log_error "Veuillez configurer un mot de passe s√©curis√© dans DB_PASSWORD"
    exit 1
fi

# Arr√™ter les conteneurs existants
log_info "Arr√™t des conteneurs existants..."
docker-compose -f $DOCKER_COMPOSE_FILE down --remove-orphans || true

# Nettoyer les images inutilis√©es (optionnel)
if [ "$ENVIRONMENT" = "production" ]; then
    log_info "Nettoyage des images Docker inutilis√©es..."
    docker system prune -f --volumes || true
fi

# Construire et d√©marrer les services
log_info "Construction et d√©marrage des services..."
if [ "$ENVIRONMENT" = "development" ]; then
    docker-compose -f $DOCKER_COMPOSE_FILE build --no-cache
    docker-compose -f $DOCKER_COMPOSE_FILE up -d
else
    docker-compose -f $DOCKER_COMPOSE_FILE build --no-cache manga_app
    docker-compose -f $DOCKER_COMPOSE_FILE up -d
fi

# Attendre que les services soient pr√™ts
log_info "Attente du d√©marrage des services..."
sleep 10

# V√©rifier le statut des services
log_info "V√©rification du statut des services..."
if docker-compose -f $DOCKER_COMPOSE_FILE ps | grep -q "Up"; then
    log_success "Services d√©marr√©s avec succ√®s"
else
    log_error "Probl√®me avec le d√©marrage des services"
    docker-compose -f $DOCKER_COMPOSE_FILE logs
    exit 1
fi

# Test de sant√© de l'API
log_info "Test de l'API..."
sleep 5  # Attendre que l'API soit vraiment pr√™te

if curl -f -s "http://localhost:${PORT:-3000}/health" > /dev/null; then
    log_success "API op√©rationnelle sur le port ${PORT:-3000}"
else
    log_warning "L'API ne r√©pond pas encore, v√©rifiez les logs avec: docker-compose logs manga_app"
fi

# Afficher les informations de d√©ploiement
log_success "üöÄ D√©ploiement termin√©!"
echo ""
log_info "Services disponibles:"
echo "  - API: http://localhost:${PORT:-3000}"
echo "  - Health check: http://localhost:${PORT:-3000}/health"
echo "  - Documentation API: http://localhost:${PORT:-3000}/api/manga"
if [ "$ENVIRONMENT" = "production" ]; then
    echo "  - Nginx (si activ√©): http://localhost:80"
fi
echo ""
log_info "Commandes utiles:"
echo "  - Voir les logs: docker-compose logs -f"
echo "  - Arr√™ter: docker-compose down"
echo "  - Red√©marrer: docker-compose restart"
echo "  - Voir le statut: docker-compose ps"
echo "  - Mise √† jour rapide: update-manga-scraper.sh (si install√©)"
echo "  - Backup DB: docker-compose exec postgres pg_dump -U postgres manga_scraper > backup.sql"
echo ""

# Afficher les logs en temps r√©el (optionnel)
read -p "Voulez-vous voir les logs en temps r√©el ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "Affichage des logs (Ctrl+C pour quitter)..."
    docker-compose -f $DOCKER_COMPOSE_FILE logs -f
fi